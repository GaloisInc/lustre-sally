Core Lustre
===========

node (signal$6 : real, errorA : real, errorB : real, errorC : real)
  returns (output, difference)
  assumes (Leq, Leq$1, Leq$2)
  shows (ok5, ok4, ok3, ok2, ok1, lemmaC, lemmaB, lemmaA)
let
  sensedA : real
    = Add(signal$6, errorA)
   
  lower_limit$5 : real
    = Neg(0.5)
   
  upper_limit$5 : real
    = 0.5
   
  pre_equalizedA$1 : real
    = pre equalizedA
   
  pre_equalizedA : real
    = 0.0 -> pre_equalizedA$1
   
  equalized_value$2 : real
    = pre_equalizedA
   
  pre_output$1 : real
    = pre output
   
  pre_output : real
    = 0.0 -> pre_output$1
   
  output_value$2 : real
    = pre_output
   
  sum1$2 : real
    = Sub(equalized_value$2, output_value$2)
   
  signal$5 : real
    = sum1$2
   
  sat1$2 : real
    = ITE(Lt(signal$5, lower_limit$5), lower_limit$5, ITE(Gt(signal$5, upper_limit$5), upper_limit$5, signal$5))
   
  lower_limit$4 : real
    = Neg(0.25)
   
  upper_limit$4 : real
    = 0.25
   
  pre_middleValue : real
    = pre middleValue
   
  centering : real
    = 0.0 -> pre_middleValue
   
  centering_value$2 : real
    = centering
   
  signal$4 : real
    = centering_value$2
   
  sat2$2 : real
    = ITE(Lt(signal$4, lower_limit$4), lower_limit$4, ITE(Gt(signal$4, upper_limit$4), upper_limit$4, signal$4))
   
  sum2$2 : real
    = Sub(sat1$2, sat2$2)
   
  pre_equalizationA : real
    = pre equalizationA
   
  init_pre_equalizationA : real
    = 0.0 -> pre_equalizationA
   
  equalizationA : real
    = Add(Mul(sum2$2, (1.0 / 5.0)), init_pre_equalizationA)
   
  equalizedA : real
    = Sub(sensedA, equalizationA)
   
  a$17 : real
    = equalizedA
   
  sensedB : real
    = Add(signal$6, errorB)
   
  lower_limit$3 : real
    = Neg(0.5)
   
  upper_limit$3 : real
    = 0.5
   
  pre_equalizedB$1 : real
    = pre equalizedB
   
  pre_equalizedB : real
    = 0.0 -> pre_equalizedB$1
   
  equalized_value$1 : real
    = pre_equalizedB
   
  output_value$1 : real
    = pre_output
   
  sum1$1 : real
    = Sub(equalized_value$1, output_value$1)
   
  signal$3 : real
    = sum1$1
   
  sat1$1 : real
    = ITE(Lt(signal$3, lower_limit$3), lower_limit$3, ITE(Gt(signal$3, upper_limit$3), upper_limit$3, signal$3))
   
  lower_limit$2 : real
    = Neg(0.25)
   
  upper_limit$2 : real
    = 0.25
   
  centering_value$1 : real
    = centering
   
  signal$2 : real
    = centering_value$1
   
  sat2$1 : real
    = ITE(Lt(signal$2, lower_limit$2), lower_limit$2, ITE(Gt(signal$2, upper_limit$2), upper_limit$2, signal$2))
   
  sum2$1 : real
    = Sub(sat1$1, sat2$1)
   
  pre_equalizationB : real
    = pre equalizationB
   
  init_pre_equalizationB : real
    = 0.0 -> pre_equalizationB
   
  equalizationB : real
    = Add(Mul(sum2$1, (1.0 / 5.0)), init_pre_equalizationB)
   
  equalizedB : real
    = Sub(sensedB, equalizationB)
   
  b$1 : real
    = equalizedB
   
  sensedC : real
    = Add(signal$6, errorC)
   
  lower_limit$1 : real
    = Neg(0.5)
   
  upper_limit$1 : real
    = 0.5
   
  pre_equalizedC$1 : real
    = pre equalizedC
   
  pre_equalizedC : real
    = 0.0 -> pre_equalizedC$1
   
  equalized_value : real
    = pre_equalizedC
   
  output_value : real
    = pre_output
   
  sum1 : real
    = Sub(equalized_value, output_value)
   
  signal$1 : real
    = sum1
   
  sat1 : real
    = ITE(Lt(signal$1, lower_limit$1), lower_limit$1, ITE(Gt(signal$1, upper_limit$1), upper_limit$1, signal$1))
   
  lower_limit : real
    = Neg(0.25)
   
  upper_limit : real
    = 0.25
   
  centering_value : real
    = centering
   
  signal : real
    = centering_value
   
  sat2 : real
    = ITE(Lt(signal, lower_limit), lower_limit, ITE(Gt(signal, upper_limit), upper_limit, signal))
   
  sum2 : real
    = Sub(sat1, sat2)
   
  pre_equalizationC : real
    = pre equalizationC
   
  init_pre_equalizationC : real
    = 0.0 -> pre_equalizationC
   
  equalizationC : real
    = Add(Mul(sum2, (1.0 / 5.0)), init_pre_equalizationC)
   
  equalizedC : real
    = Sub(sensedC, equalizationC)
   
  c$1 : real
    = equalizedC
   
  output : real
    = ITE(Lt(a$17, b$1), ITE(Lt(b$1, c$1), b$1, ITE(Lt(c$1, a$17), a$17, c$1)), ITE(Lt(a$17, c$1), a$17, ITE(Lt(c$1, b$1), b$1, c$1)))
   
  difference : real
    = Sub(output, signal$6)
   
  a$16 : real
    = Sub(equalizedA, sensedA)
   
  abs$15 : real
    = ITE(Geq(a$16, 0.0), a$16, Neg(a$16))
   
  lemmaA : bool
    = Lt(abs$15, Mul(2.0, (3.0 / 20.0)))
   
  a$15 : real
    = Sub(equalizedB, sensedB)
   
  abs$14 : real
    = ITE(Geq(a$15, 0.0), a$15, Neg(a$15))
   
  lemmaB : bool
    = Lt(abs$14, Mul(2.0, (3.0 / 20.0)))
   
  a$14 : real
    = Sub(equalizedC, sensedC)
   
  abs$13 : real
    = ITE(Geq(a$14, 0.0), a$14, Neg(a$14))
   
  lemmaC : bool
    = Lt(abs$13, Mul(2.0, (3.0 / 20.0)))
   
  a$13 : real
    = difference
   
  abs$12 : real
    = ITE(Geq(a$13, 0.0), a$13, Neg(a$13))
   
  a$12 : real
    = Mul((3.0 / 20.0), 3.0)
   
  abs$11 : real
    = ITE(Geq(a$12, 0.0), a$12, Neg(a$12))
   
  ok1 : bool
    = Lt(abs$12, abs$11)
   
  a$11 : real
    = difference
   
  abs$10 : real
    = ITE(Geq(a$11, 0.0), a$11, Neg(a$11))
   
  a$10 : real
    = Mul((3.0 / 20.0), (13.0 / 5.0))
   
  abs$9 : real
    = ITE(Geq(a$10, 0.0), a$10, Neg(a$10))
   
  ok2 : bool
    = Lt(abs$10, abs$9)
   
  a$9 : real
    = difference
   
  abs$8 : real
    = ITE(Geq(a$9, 0.0), a$9, Neg(a$9))
   
  a$8 : real
    = Mul((3.0 / 20.0), (49.0 / 20.0))
   
  abs$7 : real
    = ITE(Geq(a$8, 0.0), a$8, Neg(a$8))
   
  ok3 : bool
    = Lt(abs$8, abs$7)
   
  a$7 : real
    = difference
   
  abs$6 : real
    = ITE(Geq(a$7, 0.0), a$7, Neg(a$7))
   
  a$6 : real
    = Mul((3.0 / 20.0), (47.0 / 20.0))
   
  abs$5 : real
    = ITE(Geq(a$6, 0.0), a$6, Neg(a$6))
   
  ok4 : bool
    = Lt(abs$6, abs$5)
   
  a$5 : real
    = difference
   
  abs$4 : real
    = ITE(Geq(a$5, 0.0), a$5, Neg(a$5))
   
  a$4 : real
    = Mul((3.0 / 20.0), (23.0 / 10.0))
   
  abs$3 : real
    = ITE(Geq(a$4, 0.0), a$4, Neg(a$4))
   
  ok5 : bool
    = Lt(abs$4, abs$3)
   
  a$3 : real
    = equalizationA
   
  b : real
    = equalizationB
   
  c : real
    = equalizationC
   
  middleValue : real
    = ITE(Lt(a$3, b), ITE(Lt(b, c), b, ITE(Lt(c, a$3), a$3, c)), ITE(Lt(a$3, c), a$3, ITE(Lt(c, b), b, c)))
   
  a$2 : real
    = errorA
   
  abs$2 : real
    = ITE(Geq(a$2, 0.0), a$2, Neg(a$2))
   
  a$1 : real
    = errorB
   
  abs$1 : real
    = ITE(Geq(a$1, 0.0), a$1, Neg(a$1))
   
  a : real
    = errorC
   
  abs : real
    = ITE(Geq(a, 0.0), a, Neg(a))
   
  Leq$2 : bool
    = Leq(abs$2, (3.0 / 20.0))
   
  Leq$1 : bool
    = Leq(abs$1, (3.0 / 20.0))
   
  Leq : bool
    = Leq(abs, (3.0 / 20.0))
tel
Sally Model
===========

(define-state-type
   S
   (
     (Leq Bool)
     (a Real)
     (abs Real)
     (b Real)
     (c Real)
     (centering Real)
     (difference Real)
     (equalizationA Real)
     (equalizationB Real)
     (equalizationC Real)
     (equalizedA Real)
     (equalizedB Real)
     (equalizedC Real)
     (errorA Real)
     (errorB Real)
     (errorC Real)
     (lemmaA Bool)
     (lemmaB Bool)
     (lemmaC Bool)
     (middleValue Real)
     (ok1 Bool)
     (ok2 Bool)
     (ok3 Bool)
     (ok4 Bool)
     (ok5 Bool)
     (output Real)
     (sat1 Real)
     (sat2 Real)
     (sensedA Real)
     (sensedB Real)
     (sensedC Real)
     (signal Real)
     (sum1 Real)
     (sum2 Real)
     (|Leq:1| Bool)
     (|Leq:2| Bool)
     (|a:10| Real)
     (|a:11| Real)
     (|a:12| Real)
     (|a:13| Real)
     (|a:14| Real)
     (|a:15| Real)
     (|a:16| Real)
     (|a:17| Real)
     (|a:1| Real)
     (|a:2| Real)
     (|a:3| Real)
     (|a:4| Real)
     (|a:5| Real)
     (|a:6| Real)
     (|a:7| Real)
     (|a:8| Real)
     (|a:9| Real)
     (|abs:10| Real)
     (|abs:11| Real)
     (|abs:12| Real)
     (|abs:13| Real)
     (|abs:14| Real)
     (|abs:15| Real)
     (|abs:1| Real)
     (|abs:2| Real)
     (|abs:3| Real)
     (|abs:4| Real)
     (|abs:5| Real)
     (|abs:6| Real)
     (|abs:7| Real)
     (|abs:8| Real)
     (|abs:9| Real)
     (|b:1| Real)
     (|c:1| Real)
     (|centering:init| Bool)
     (|centering_value:1| Real)
     (|centering_value:2| Real)
     (|centering_value| Real)
     (|equalized_value:1| Real)
     (|equalized_value:2| Real)
     (|equalized_value| Real)
     (|gal-initializing| Bool)
     (|init_pre_equalizationA:init| Bool)
     (|init_pre_equalizationA| Real)
     (|init_pre_equalizationB:init| Bool)
     (|init_pre_equalizationB| Real)
     (|init_pre_equalizationC:init| Bool)
     (|init_pre_equalizationC| Real)
     (|lower_limit:1| Real)
     (|lower_limit:2| Real)
     (|lower_limit:3| Real)
     (|lower_limit:4| Real)
     (|lower_limit:5| Real)
     (|lower_limit| Real)
     (|output_value:1| Real)
     (|output_value:2| Real)
     (|output_value| Real)
     (|pre_equalizationA| Real)
     (|pre_equalizationB| Real)
     (|pre_equalizationC| Real)
     (|pre_equalizedA:1| Real)
     (|pre_equalizedA:init| Bool)
     (|pre_equalizedA| Real)
     (|pre_equalizedB:1| Real)
     (|pre_equalizedB:init| Bool)
     (|pre_equalizedB| Real)
     (|pre_equalizedC:1| Real)
     (|pre_equalizedC:init| Bool)
     (|pre_equalizedC| Real)
     (|pre_middleValue| Real)
     (|pre_output:1| Real)
     (|pre_output:init| Bool)
     (|pre_output| Real)
     (|sat1:1| Real)
     (|sat1:2| Real)
     (|sat2:1| Real)
     (|sat2:2| Real)
     (|signal:1| Real)
     (|signal:2| Real)
     (|signal:3| Real)
     (|signal:4| Real)
     (|signal:5| Real)
     (|signal:6| Real)
     (|sum1:1| Real)
     (|sum1:2| Real)
     (|sum2:1| Real)
     (|sum2:2| Real)
     (|upper_limit:1| Real)
     (|upper_limit:2| Real)
     (|upper_limit:3| Real)
     (|upper_limit:4| Real)
     (|upper_limit:5| Real)
     (|upper_limit| Real))
   (
     (errorA Real)
     (errorB Real)
     (errorC Real)
     (|signal:6| Real)))
(define-transition-system
   TS
   S
   (and
      (= |gal-initializing| true)
      (= |pre_equalizedA:init| true)
      (= |pre_output:init| true)
      (= |centering:init| true)
      (= |init_pre_equalizationA:init| true)
      (= |pre_equalizedB:init| true)
      (= |init_pre_equalizationB:init| true)
      (= |pre_equalizedC:init| true)
      (= |init_pre_equalizationC:init| true))
   (and
      (= next.|gal-initializing| false)
      (= next.|signal:6| input.|signal:6|)
      (= next.errorA input.errorA)
      (= next.errorB input.errorB)
      (= next.errorC input.errorC)
      next.Leq
      next.|Leq:1|
      next.|Leq:2|
      (=
         next.sensedA
         (+ next.|signal:6| next.errorA))
      (=
         next.|lower_limit:5|
         (- 0.5))
      (= next.|upper_limit:5| 0.5)
      (= next.|pre_equalizedA:1| state.equalizedA)
      (ite
         state.|pre_equalizedA:init|
         (= next.|pre_equalizedA| 0.0)
         (= next.|pre_equalizedA| next.|pre_equalizedA:1|))
      (= next.|pre_equalizedA:init| false)
      (= next.|equalized_value:2| next.|pre_equalizedA|)
      (= next.|pre_output:1| state.output)
      (ite
         state.|pre_output:init|
         (= next.|pre_output| 0.0)
         (= next.|pre_output| next.|pre_output:1|))
      (= next.|pre_output:init| false)
      (= next.|output_value:2| next.|pre_output|)
      (=
         next.|sum1:2|
         (- next.|equalized_value:2| next.|output_value:2|))
      (= next.|signal:5| next.|sum1:2|)
      (=
         next.|sat1:2|
         (ite
            (< next.|signal:5| next.|lower_limit:5|)
            next.|lower_limit:5|
            (ite
               (< next.|upper_limit:5| next.|signal:5|)
               next.|upper_limit:5|
               next.|signal:5|)))
      (=
         next.|lower_limit:4|
         (- 0.25))
      (= next.|upper_limit:4| 0.25)
      (= next.|pre_middleValue| state.middleValue)
      (ite
         state.|centering:init|
         (= next.centering 0.0)
         (= next.centering next.|pre_middleValue|))
      (= next.|centering:init| false)
      (= next.|centering_value:2| next.centering)
      (= next.|signal:4| next.|centering_value:2|)
      (=
         next.|sat2:2|
         (ite
            (< next.|signal:4| next.|lower_limit:4|)
            next.|lower_limit:4|
            (ite
               (< next.|upper_limit:4| next.|signal:4|)
               next.|upper_limit:4|
               next.|signal:4|)))
      (=
         next.|sum2:2|
         (- next.|sat1:2| next.|sat2:2|))
      (= next.|pre_equalizationA| state.equalizationA)
      (ite
         state.|init_pre_equalizationA:init|
         (= next.|init_pre_equalizationA| 0.0)
         (= next.|init_pre_equalizationA| next.|pre_equalizationA|))
      (= next.|init_pre_equalizationA:init| false)
      (=
         next.equalizationA
         (+
            (*
               next.|sum2:2|
               (/ 1 5))
            next.|init_pre_equalizationA|))
      (=
         next.equalizedA
         (- next.sensedA next.equalizationA))
      (= next.|a:17| next.equalizedA)
      (=
         next.sensedB
         (+ next.|signal:6| next.errorB))
      (=
         next.|lower_limit:3|
         (- 0.5))
      (= next.|upper_limit:3| 0.5)
      (= next.|pre_equalizedB:1| state.equalizedB)
      (ite
         state.|pre_equalizedB:init|
         (= next.|pre_equalizedB| 0.0)
         (= next.|pre_equalizedB| next.|pre_equalizedB:1|))
      (= next.|pre_equalizedB:init| false)
      (= next.|equalized_value:1| next.|pre_equalizedB|)
      (= next.|output_value:1| next.|pre_output|)
      (=
         next.|sum1:1|
         (- next.|equalized_value:1| next.|output_value:1|))
      (= next.|signal:3| next.|sum1:1|)
      (=
         next.|sat1:1|
         (ite
            (< next.|signal:3| next.|lower_limit:3|)
            next.|lower_limit:3|
            (ite
               (< next.|upper_limit:3| next.|signal:3|)
               next.|upper_limit:3|
               next.|signal:3|)))
      (=
         next.|lower_limit:2|
         (- 0.25))
      (= next.|upper_limit:2| 0.25)
      (= next.|centering_value:1| next.centering)
      (= next.|signal:2| next.|centering_value:1|)
      (=
         next.|sat2:1|
         (ite
            (< next.|signal:2| next.|lower_limit:2|)
            next.|lower_limit:2|
            (ite
               (< next.|upper_limit:2| next.|signal:2|)
               next.|upper_limit:2|
               next.|signal:2|)))
      (=
         next.|sum2:1|
         (- next.|sat1:1| next.|sat2:1|))
      (= next.|pre_equalizationB| state.equalizationB)
      (ite
         state.|init_pre_equalizationB:init|
         (= next.|init_pre_equalizationB| 0.0)
         (= next.|init_pre_equalizationB| next.|pre_equalizationB|))
      (= next.|init_pre_equalizationB:init| false)
      (=
         next.equalizationB
         (+
            (*
               next.|sum2:1|
               (/ 1 5))
            next.|init_pre_equalizationB|))
      (=
         next.equalizedB
         (- next.sensedB next.equalizationB))
      (= next.|b:1| next.equalizedB)
      (=
         next.sensedC
         (+ next.|signal:6| next.errorC))
      (=
         next.|lower_limit:1|
         (- 0.5))
      (= next.|upper_limit:1| 0.5)
      (= next.|pre_equalizedC:1| state.equalizedC)
      (ite
         state.|pre_equalizedC:init|
         (= next.|pre_equalizedC| 0.0)
         (= next.|pre_equalizedC| next.|pre_equalizedC:1|))
      (= next.|pre_equalizedC:init| false)
      (= next.|equalized_value| next.|pre_equalizedC|)
      (= next.|output_value| next.|pre_output|)
      (=
         next.sum1
         (- next.|equalized_value| next.|output_value|))
      (= next.|signal:1| next.sum1)
      (=
         next.sat1
         (ite
            (< next.|signal:1| next.|lower_limit:1|)
            next.|lower_limit:1|
            (ite
               (< next.|upper_limit:1| next.|signal:1|)
               next.|upper_limit:1|
               next.|signal:1|)))
      (=
         next.|lower_limit|
         (- 0.25))
      (= next.|upper_limit| 0.25)
      (= next.|centering_value| next.centering)
      (= next.signal next.|centering_value|)
      (=
         next.sat2
         (ite
            (< next.signal next.|lower_limit|)
            next.|lower_limit|
            (ite
               (< next.|upper_limit| next.signal)
               next.|upper_limit|
               next.signal)))
      (=
         next.sum2
         (- next.sat1 next.sat2))
      (= next.|pre_equalizationC| state.equalizationC)
      (ite
         state.|init_pre_equalizationC:init|
         (= next.|init_pre_equalizationC| 0.0)
         (= next.|init_pre_equalizationC| next.|pre_equalizationC|))
      (= next.|init_pre_equalizationC:init| false)
      (=
         next.equalizationC
         (+
            (*
               next.sum2
               (/ 1 5))
            next.|init_pre_equalizationC|))
      (=
         next.equalizedC
         (- next.sensedC next.equalizationC))
      (= next.|c:1| next.equalizedC)
      (=
         next.output
         (ite
            (< next.|a:17| next.|b:1|)
            (ite
               (< next.|b:1| next.|c:1|)
               next.|b:1|
               (ite
                  (< next.|c:1| next.|a:17|)
                  next.|a:17|
                  next.|c:1|))
            (ite
               (< next.|a:17| next.|c:1|)
               next.|a:17|
               (ite
                  (< next.|c:1| next.|b:1|)
                  next.|b:1|
                  next.|c:1|))))
      (=
         next.difference
         (- next.output next.|signal:6|))
      (=
         next.|a:16|
         (- next.equalizedA next.sensedA))
      (=
         next.|abs:15|
         (ite
            (<= 0.0 next.|a:16|)
            next.|a:16|
            (- next.|a:16|)))
      (=
         next.lemmaA
         (<
            next.|abs:15|
            (*
               2.0
               (/ 3 20))))
      (=
         next.|a:15|
         (- next.equalizedB next.sensedB))
      (=
         next.|abs:14|
         (ite
            (<= 0.0 next.|a:15|)
            next.|a:15|
            (- next.|a:15|)))
      (=
         next.lemmaB
         (<
            next.|abs:14|
            (*
               2.0
               (/ 3 20))))
      (=
         next.|a:14|
         (- next.equalizedC next.sensedC))
      (=
         next.|abs:13|
         (ite
            (<= 0.0 next.|a:14|)
            next.|a:14|
            (- next.|a:14|)))
      (=
         next.lemmaC
         (<
            next.|abs:13|
            (*
               2.0
               (/ 3 20))))
      (= next.|a:13| next.difference)
      (=
         next.|abs:12|
         (ite
            (<= 0.0 next.|a:13|)
            next.|a:13|
            (- next.|a:13|)))
      (=
         next.|a:12|
         (*
            (/ 3 20)
            3.0))
      (=
         next.|abs:11|
         (ite
            (<= 0.0 next.|a:12|)
            next.|a:12|
            (- next.|a:12|)))
      (=
         next.ok1
         (< next.|abs:12| next.|abs:11|))
      (= next.|a:11| next.difference)
      (=
         next.|abs:10|
         (ite
            (<= 0.0 next.|a:11|)
            next.|a:11|
            (- next.|a:11|)))
      (=
         next.|a:10|
         (*
            (/ 3 20)
            (/ 13 5)))
      (=
         next.|abs:9|
         (ite
            (<= 0.0 next.|a:10|)
            next.|a:10|
            (- next.|a:10|)))
      (=
         next.ok2
         (< next.|abs:10| next.|abs:9|))
      (= next.|a:9| next.difference)
      (=
         next.|abs:8|
         (ite
            (<= 0.0 next.|a:9|)
            next.|a:9|
            (- next.|a:9|)))
      (=
         next.|a:8|
         (*
            (/ 3 20)
            (/ 49 20)))
      (=
         next.|abs:7|
         (ite
            (<= 0.0 next.|a:8|)
            next.|a:8|
            (- next.|a:8|)))
      (=
         next.ok3
         (< next.|abs:8| next.|abs:7|))
      (= next.|a:7| next.difference)
      (=
         next.|abs:6|
         (ite
            (<= 0.0 next.|a:7|)
            next.|a:7|
            (- next.|a:7|)))
      (=
         next.|a:6|
         (*
            (/ 3 20)
            (/ 47 20)))
      (=
         next.|abs:5|
         (ite
            (<= 0.0 next.|a:6|)
            next.|a:6|
            (- next.|a:6|)))
      (=
         next.ok4
         (< next.|abs:6| next.|abs:5|))
      (= next.|a:5| next.difference)
      (=
         next.|abs:4|
         (ite
            (<= 0.0 next.|a:5|)
            next.|a:5|
            (- next.|a:5|)))
      (=
         next.|a:4|
         (*
            (/ 3 20)
            (/ 23 10)))
      (=
         next.|abs:3|
         (ite
            (<= 0.0 next.|a:4|)
            next.|a:4|
            (- next.|a:4|)))
      (=
         next.ok5
         (< next.|abs:4| next.|abs:3|))
      (= next.|a:3| next.equalizationA)
      (= next.b next.equalizationB)
      (= next.c next.equalizationC)
      (=
         next.middleValue
         (ite
            (< next.|a:3| next.b)
            (ite
               (< next.b next.c)
               next.b
               (ite
                  (< next.c next.|a:3|)
                  next.|a:3|
                  next.c))
            (ite
               (< next.|a:3| next.c)
               next.|a:3|
               (ite
                  (< next.c next.b)
                  next.b
                  next.c))))
      (= next.|a:2| next.errorA)
      (=
         next.|abs:2|
         (ite
            (<= 0.0 next.|a:2|)
            next.|a:2|
            (- next.|a:2|)))
      (= next.|a:1| next.errorB)
      (=
         next.|abs:1|
         (ite
            (<= 0.0 next.|a:1|)
            next.|a:1|
            (- next.|a:1|)))
      (= next.a next.errorC)
      (=
         next.abs
         (ite
            (<= 0.0 next.a)
            next.a
            (- next.a)))
      (=
         next.|Leq:2|
         (<=
            next.|abs:2|
            (/ 3 20)))
      (=
         next.|Leq:1|
         (<=
            next.|abs:1|
            (/ 3 20)))
      (=
         next.Leq
         (<=
            next.abs
            (/ 3 20)))))

(query
   TS
   (or |gal-initializing| ok5))
(query
   TS
   (or |gal-initializing| ok4))
(query
   TS
   (or |gal-initializing| ok3))
(query
   TS
   (or |gal-initializing| ok2))
(query
   TS
   (or |gal-initializing| ok1))
(query
   TS
   (or |gal-initializing| lemmaC))
(query
   TS
   (or |gal-initializing| lemmaB))
(query
   TS
   (or |gal-initializing| lemmaA))

[Lustre] Validating properties:
[Lustre] Property ok5... considering simultaneous states to depth 0
considering simultaneous states to depth 0
considering simultaneous states to depth 1
considering simultaneous states to depth 1
considering simultaneous states to depth 2
considering simultaneous states to depth 2
considering simultaneous states to depth 3
considering simultaneous states to depth 3
considering simultaneous states to depth 4
considering simultaneous states to depth 4
considering simultaneous states to depth 5
considering simultaneous states to depth 5
considering simultaneous states to depth 6
[Error] Sally error:
Timeout
[Error] ExitFailure 1

