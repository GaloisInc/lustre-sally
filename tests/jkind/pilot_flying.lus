-- This file is derived from an AADL model and some initial AADL to
-- Lustre translation work. They key property of
-- at_least_one_pilot_flying_side requires k = 22

node Pilot_Flying_Pilot_Flying_Side_Logic(
  riseTS : bool; riseOSPF : bool; QS_Properties_Clock_Name : bool; QS_Properties_Primary_Side : bool
) returns (PFS : bool);

var
  St_Start : int;
  St_Wait : int;
  St_Stop : int;
  T6 : bool;
  St_Pilot_Flying : int;
  T5 : bool;
  T4 : bool;
  T3 : bool;
  T2 : bool;
  T1 : bool;
  St_Not_Pilot_Flying : int;
  St_Inhibit : int;


  state : subrange [1,6] of int;
  -- state : int;

let

  St_Inhibit = 2;
  St_Not_Pilot_Flying = 3;
  St_Pilot_Flying = 4;
  St_Wait = 5;
  St_Start = 1;
  St_Stop = 6;

  T4 = QS_Properties_Clock_Name and (1 -> pre(state)) = 2;
  T5 = QS_Properties_Clock_Name and (1 -> pre(state)) = 3 and riseTS;
  T6 = QS_Properties_Clock_Name and (1 -> pre(state)) = 4 and riseOSPF;
  T3 = QS_Properties_Clock_Name and (1 -> pre(state)) = 5;
  T2 = QS_Properties_Clock_Name and (1 -> pre(state)) = 1 and not QS_Properties_Primary_Side;
  T1 = QS_Properties_Clock_Name and (1 -> pre(state)) = 1 and QS_Properties_Primary_Side;

  state = if T6 or T2 then 2 
          else if T4 then 3 
               else if T3 then 4 
                    else if T5 or T1 then 5 
               else (1 -> pre(state));

  PFS =  if T5 then true
       else if T6 then false
       else if T2 then false
       else if T1 then true
       else (QS_Properties_Primary_Side -> pre(PFS));

tel;

node Pilot_Flying_Side_Side_Impl(
  TS : bool; OSPF : bool; QS_Properties_Clock_Name : bool; QS_Properties_Primary_Side : bool
) returns (PFS : bool);

var
  PFSL_PFS : bool;
  riseTS_O : bool;
  riseOSPF_O : bool;

let
  PFSL_PFS = Pilot_Flying_Pilot_Flying_Side_Logic(riseTS_O, riseOSPF_O, QS_Properties_Clock_Name, QS_Properties_Primary_Side);
  riseTS_O = Signals_Rise(TS, QS_Properties_Clock_Name);
  riseOSPF_O = Signals_Rise(OSPF, QS_Properties_Clock_Name);
  PFS = PFSL_PFS;


tel;


node Pilot_Flying_Cross_Channel_Bus
  (
   I : bool; 
   QS_Properties_Clock_Name : bool; 
   QS_Properties_Init_Bool : bool
   ) 
returns (O : bool);
var
  prev_I : bool;
let
  prev_I = if QS_Properties_Clock_Name then 
             QS_Properties_Init_Bool -> pre(I)
           else
             QS_Properties_Init_Bool -> pre(prev_I);

  O = if QS_Properties_Clock_Name then 
        prev_I 
      else 
        QS_Properties_Init_Bool -> pre(O);
  
tel;

-- node Pilot_Flying_Cross_Channel_Bus(
--   I : bool; QS_Properties_Clock_Name : bool; QS_Properties_Init_Bool : bool
-- ) returns (O : bool);
-- 
-- var
--   St_Step : int;
--   prev_I : bool;
--   T2 : bool;
--   T1 : bool;
--   St_Stop : int;
--   St_Start : int;
-- 
-- 
--   --state : subrange [1,3] of int;
--   state : int;
-- 
-- let
-- 
--   St_Step = 2;
--   St_Start = 1;
--   St_Stop = 3;
-- 
--   T2 = QS_Properties_Clock_Name and (1 -> pre(state)) = 2;
--   T1 = QS_Properties_Clock_Name and (1 -> pre(state)) = 1;
-- 
--   state = if T2 or T1 then 2 
--           else (1 -> pre(state));
-- 
--   O =  if T2 then prev_I
--        else if T1 then QS_Properties_Init_Bool
--        else QS_Properties_Init_Bool -> pre(O);
--   prev_I =  if T2 then I
--        else if T1 then QS_Properties_Init_Bool
--        else QS_Properties_Init_Bool -> pre(prev_I);
-- 
-- tel;

node Pilot_Flying_PilotFlying_Pilot_Flying_Impl(
  TS : bool; CLK1 : bool; CLK3 : bool; CLK2 : bool; CLK4 : bool
) returns (LPFS : bool; RPFS : bool);

var
  RL_O : bool;
  RS_PFS : bool;
  LR_O : bool;
  LS_PFS : bool;

let
  LS_PFS = Pilot_Flying_Side_Side_Impl(TS, RL_O, CLK1, true);
  RS_PFS = Pilot_Flying_Side_Side_Impl(TS, LR_O, CLK3, false);
  LR_O = Pilot_Flying_Cross_Channel_Bus(LS_PFS, CLK2, true);
  RL_O = Pilot_Flying_Cross_Channel_Bus(RS_PFS, CLK4, false);
  LPFS = LS_PFS;
  RPFS = RS_PFS;


tel;


node Signals_Rise 
(I : bool;  clk : bool) 
returns 
  (O : bool);
var
  pre_I: bool;
let 
  pre_I = (clk => I) and (not clk => (false -> pre(pre_I)));
  O = false -> not pre(pre_I) and I;
tel;


node main(
	TS : bool;
	CLK1 : bool;
	CLK3 : bool;
	CLK2 : bool;
	CLK4 : bool)returns (
  LPFS : bool;
  RPFS : bool);

var
  clocks_are_quasi_synchronous : bool;
  stable_state : bool;
  all_clocks_ticked_once : bool;
  at_least_one_pilot_flying_side : bool;
  agree_on_pilot_flying_side : bool;
  transfer_switch_changes_sides : bool;
  left_side_initial_pilot_flying_side : bool;
  pilot_flying_side_unchanged_unless_transfer_switch_pressed : bool;

let

  --%MAIN
  clocks_are_quasi_synchronous = calendar(CLK1, CLK3, CLK2, CLK4);

  assert clocks_are_quasi_synchronous;
  assert (CLK1 or CLK3 or CLK2 or CLK4);

--  assert (true -> not
--          (pre(CLK1) and not CLK1 and         -- clk1: 1 0
--           not pre(CLK2) and not CLK2 and     -- clk2: 0 0
--           not pre(CLK3) and CLK3 and         -- clk3: 0 1
--           not pre(CLK4) and not CLK4));      -- clk4: 0 0
--
--
--  assert (true -> not
--          (not pre(CLK1) and CLK1 and         -- clk1: 0 1
--           not pre(CLK2) and not CLK2 and     -- clk2: 0 0
--           pre(CLK3) and not CLK3 and         -- clk3: 1 0
--           not pre(CLK4) and not CLK4));      -- clk4: 0 0
--
--
--  assert (true -> not
--          (not pre(CLK1) and not CLK1 and     -- clk1: 0 0
--           pre(CLK2) and not CLK2 and         -- clk2: 1 0
--           not pre(CLK3) and not CLK3 and     -- clk3: 0 0
--           not pre(CLK4) and CLK4));          -- clk4: 0 1
--
--
--  assert (true -> not
--          (not pre(CLK1) and not CLK1 and     -- clk1: 0 0
--           not pre(CLK2) and CLK2 and         -- clk2: 0 1
--           not pre(CLK3) and not CLK3 and     -- clk3: 0 0
--           pre(CLK4) and not CLK4));          -- clk4: 1 0
--

  LPFS, RPFS =
    Pilot_Flying_PilotFlying_Pilot_Flying_Impl(TS,CLK1,CLK3,CLK2,CLK4);

   all_clocks_ticked_once = ticked(CLK1) and ticked(CLK2) and ticked(CLK3) and ticked(CLK4);

   stable_state = not PRESSED(pre TS);

----------------------------------------------------------------------------------------------------
-- R1. At least one side shall always be the pilot flying side.
----------------------------------------------------------------------------------------------------
   at_least_one_pilot_flying_side = 
    (clocks_are_quasi_synchronous  and 
    all_clocks_ticked_once) =>
      (LPFS or RPFS);
      
   
----------------------------------------------------------------------------------------------------
-- R2. Both sides shall agree on the pilot flying side 
-- except while the system is switching sides.
----------------------------------------------------------------------------------------------------
   agree_on_pilot_flying_side = 
    (clocks_are_quasi_synchronous or not clocks_are_quasi_synchronous) and 
      (not PRESSED(TS) => (LPFS = not RPFS));
      
   
----------------------------------------------------------------------------------------------------
-- R3. Pressing the transfer switch shall always change the pilot flying side.
----------------------------------------------------------------------------------------------------
   transfer_switch_changes_sides = 
    (clocks_are_quasi_synchronous or not clocks_are_quasi_synchronous) and 
      (not LPFS  and PRESSED(TS) => LPFS) and
      (not RPFS and PRESSED(TS) => RPFS);
      
   
----------------------------------------------------------------------------------------------------
-- R4. The system shall start with the left side as the pilot flying side.
----------------------------------------------------------------------------------------------------
   left_side_initial_pilot_flying_side = 
    (clocks_are_quasi_synchronous or not clocks_are_quasi_synchronous) and 
      LPFS  -> true;
      
   
----------------------------------------------------------------------------------------------------
-- R5. If the transfer switch is not pressed the system shall not change the pilot flying side.
----------------------------------------------------------------------------------------------------
   pilot_flying_side_unchanged_unless_transfer_switch_pressed = 
    (clocks_are_quasi_synchronous or not clocks_are_quasi_synchronous) and 
      stable_state => 
      (not PRESSED(TS) =>
       not (CHANGED(RPFS) or CHANGED(LPFS)));
      
   
	--%PROPERTY at_least_one_pilot_flying_side;
	-- --%PROPERTY agree_on_pilot_flying_side;
	-- --%PROPERTY transfer_switch_changes_sides;
	--%PROPERTY left_side_initial_pilot_flying_side;
	-- --%PROPERTY pilot_flying_side_unchanged_unless_transfer_switch_pressed;
tel;

---------------------------------------------------------------------------------------------------
-- PRESSED - returns true when predicate p changes from false to true
----------------------------------------------------------------------------------------------------
node PRESSED (p : bool) returns (b : bool);
let
   b = false -> (not pre p and p);
tel;

---------------------------------------------------------------------------------------------------
-- CHANGED - returns true when predicate p changes value
----------------------------------------------------------------------------------------------------
node CHANGED (p : bool) returns (b : bool);
let
   b = false ->  not (p = pre p);
tel;

node ticked(c: bool) returns (b: bool);
let 
   b = (false -> pre b) or c;
tel;
------------------------------------------------------------------------
-- Quasi-synchronous clocks
------------------------------------------------------------------------

node qs_dfa (p, q : bool) returns (ok : bool);
var
  r : int;
  r_is_bounded : bool;
let
  ok = not (((0 -> pre r) = 2 and p) or ((0 -> pre r) = -2 and q));
  
  r = if p and q then 0 
      else if p then (if (0 -> pre r) < 0 then 1 else ((0 -> pre r) + 1))
      else if q then (if (0 -> pre r) > 0 then -1 else ((0 -> pre r) - 1))
      else (0 -> pre r);

  r_is_bounded = r <= 2 and r >= -2;

  --%PROPERTY r_is_bounded;

tel;

node calendar(CLK1 : bool; CLK2 : bool; CLK3 : bool; CLK4 : bool) returns (ok : bool);
let
  ok = 
    qs_dfa(CLK1, CLK2) and 
    qs_dfa(CLK1, CLK3) and 
    qs_dfa(CLK1, CLK4) and 
    qs_dfa(CLK2, CLK3) and 
    qs_dfa(CLK2, CLK4) and 
    qs_dfa(CLK3, CLK4);
tel;



-- node count(tick, reset : bool) returns (n : subrange [0, 2] of int);
-- let
--   n = (if tick then 1 else 0) + (if reset then 0 else (0 -> pre n));
-- tel;
-- 
-- 
-- node calendar(CLK1 : bool; CLK3 : bool; CLK2 : bool; CLK4 : bool) returns (ok : bool);
-- var
--   CLK12, CLK13, CLK14, CLK21, CLK23, CLK24, CLK31, CLK32, CLK34, CLK41, CLK42, CLK43 : int;
-- let
--   CLK12 = count(CLK1, CLK2);
--   CLK13 = count(CLK1, CLK3);
--   CLK14 = count(CLK1, CLK4);
--   CLK21 = count(CLK2, CLK1);
--   CLK23 = count(CLK2, CLK3);
--   CLK24 = count(CLK2, CLK4);
--   CLK31 = count(CLK3, CLK1);
--   CLK32 = count(CLK3, CLK2);
--   CLK34 = count(CLK3, CLK4);
--   CLK41 = count(CLK4, CLK1);
--   CLK42 = count(CLK4, CLK2);
--   CLK43 = count(CLK4, CLK3);
-- 
--   ok = 
--     CLK12 <= 2 and CLK13 <= 2 and CLK14 <= 2 and 
--     CLK21 <= 2 and CLK23 <= 2 and CLK24 <= 2 and
--     CLK31 <= 2 and CLK32 <= 2 and CLK34 <= 2 and 
--     CLK41 <= 2 and CLK42 <= 2 and CLK43 <= 2;
-- 
-- tel;
